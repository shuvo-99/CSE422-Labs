# -*- coding: utf-8 -*-
"""CSE422_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ongjtBi0GWjKU8ILcZQDWH8gZJpYicMT
"""

import numpy as np
import random

initial_input = input().split(' ')
batsman = int(initial_input[0])
target_runs = int(initial_input[1])

Individual_runs = []
namelist = []

for i in range(batsman):

   d = input().split(' ')
   init = iter(d)
   res_dct = dict(zip(init, init))

   for key, value in res_dct.items():
       namelist.append(key)
       Individual_runs.append(int(value))

def fitness(population, batsman, target_runs):
   res_values = []
   new_value, new_order = None, None

   value = 0
   for i in population:
       for j in range(batsman):
           if (i[j] == 1):
               value += Individual_runs[j]
       value = abs(value)

       if all(j == 0 for j in i):
           value += 10000
       res_values.append([value, i])

       if new_value == None:
           new_value, new_order = value, i

       elif abs(target_runs - value) < abs(target_runs - new_value):
           new_value, new_order = value, i
   return res_values, new_value, new_order


def select(res_values):
   x_parent, y_parent, total_values, childList = [], [], [], []

   for i in range(len(res_values) // 2):
       temp = res_values[i][1]
       res_values[i][1] = res_values[len(res_values) - i - 1][1]
       res_values[len(res_values) - i - 1][1] = temp

   fitness_value = 0
   for i in range(len(res_values)):
       fitness_value += res_values[i][0]
       total_values.append(fitness_value)

   for i in range(100 // 2):
       value1 = random.randrange(fitness_value)
       value2 = random.randrange(fitness_value)

       for j in range(len(total_values)):
           if total_values[j] >= value1:
               x_parent = res_values[j][1]
               break

       for j in range(len(total_values)):
           if total_values[j] >= value2:
               y_parent = res_values[j][1]
               break

       interchange_position = random.randrange(1, batsman)
       interchangedList1 = crossover(x_parent, y_parent, interchange_position)
       interchangedList2 = crossover(y_parent, x_parent, interchange_position)

       childList.append(interchangedList1)
       childList.append(interchangedList2)

   return childList


def crossover(x, y, interchange_position):
   newList = None
   newList = x[:interchange_position] + y[interchange_position:]
   return newList


def mutate(child):
   mutated_gen = []
   for i in child:
       for j in range(1):
           i[random.randrange(batsman)] = random.randint(0, 1)
       mutated_gen.append(i)
   return mutated_gen

def GA(population, generation_limit, batsman, target_runs, namelist):
   check = False

   for i in range(generation_limit):
       res_values, new_value, new_order = fitness(population, batsman, target_runs)

       result = all(j == 0 for j in new_order)
       if (result):
           check = True
       if new_value == target_runs and not check:
           break
       new_gen = select(res_values)
       population = mutate(new_gen)

       if i == generation_limit - 1:
           check = True
   if check == True:
       print(namelist)
       print(-1)
   else:
       print(namelist)
       str_new_order = ''.join([str(i) for i in new_order])
       print(str_new_order)


generation_limit = 100

population = []
for i in range(100):
   order = []
   for j in range(batsman):
       order.append(random.randint(0, 1))
       population.append(order)

GA(population, generation_limit, batsman, target_runs, namelist)